Prior preprocesing: In excel, removed # symbols, removed start tabs from indented rows and edited rows with value in units column in order to load into R.
library(lubridate)
library(plyr)
library(dplyr)

#Join tables previously split for formatting
Patients<-read.table("Patients.csv",header=TRUE, sep=",")
testsA<-read.table("1tests.csv",header=TRUE,sep= ",")
testsB<-read.table("2tests.csv",header=TRUE,sep= ",",quote="")
testsC<-read.table("3tests.csv",header=TRUE,sep= ",") 
testsD<-read.table("4tests.csv",header=TRUE,sep= ",")
testsE<-read.table("5tests.csv",header=TRUE,sep= ",")
testsF<-read.table("6tests.csv",header=TRUE,sep= ",")
testsG<-read.table("7tests.csv",header=TRUE,sep= ",")
testsH<-read.table("8tests.csv",header=TRUE,sep= ",")
tests<- rbind(testsA,testsB,testsC,testsD,testsE,testsF,testsG,testsH)
write.csv(tests,file="tests.csv")
#In our analysis it was only possible to load data in multiple files:
#Only need to do this once: rbind, save a copy for future analysis
#################################################################################################

Patients<-read.table("Patients.csv",header=TRUE, sep=",")
tests<-read.table("tests.csv",header=TRUE,sep= ",")
SIR<- merge(Patients,tests,all=TRUE, by='PatID')
levels(as.factor(SIR$PatID))
#78630

#create new vectors for age, hospital/GP (Full dob not provided)
SIR$Age<-(as.numeric(year(strptime(SIR$EntryDate, format="%d/%m/%Y"))))-SIR$Year_Of_Birth
attach(SIR)

#select data from individuals aged 15 and over
Over<-subset(SIR,SIR$Age>15 & as.numeric(year(strptime(SIR$EntryDate, format="%d/%m/%Y")))>=2009,)
Over$location<- ifelse(Over$Source=="salfordt", c("Hospital"),("GP"))
attach(Over)

#Group related read codes
levels(Over$ReadCode)
levels(Over$ReadCode)[c(1:23,36:43,51:54,57,61,62)] <- "dialysisorckd"
levels(Over$ReadCode)[c(2:6,14,15,19,21)] <- "creatinine"
levels(Over$ReadCode)[3:6] <- "eGFR"
levels(Over$ReadCode)[4:14] <- "transplant"

table(Over$ReadCode)
#Check these manually every time you re-extract/resubset as they will change
attach(Over)

#Assign more options
options(expressions=20000)
Over$EntryDate<-as.Date(as.character(Over$EntryDate), format="%d/%m/%Y")
quant<-Over[Over$ReadCode=="creatinine" &as.numeric(Over$Value)>0 & as.numeric(year(strptime(Over$EntryDate, format="%Y-%m-%d")))==2012,]
table(quant$ReadCode)
#Gives the number of creatinine values for the index year prior to data cleansing (284309)

#Check which units have been used to measure Creatinine and convert #from mg/dL to umol/L if needed
levels(Over$Units)
levels(Over$Units)[c(9:18,39,44,47)]<- "mLmin173m2"
levels(Over$Units)[c(6,17:19,28,33)]<-"umol/L"
table(Over$Units,Over$ReadCode)
levels(Over$Units)[c(1,5,7,13:16,27)]<- "mLmin173m2"

Over$stcreat<- ifelse(Over$Units=="umol/L"| Over$Units=="None",Over$Value,(Over$Value/1000)) 
Over$stcreat<- ifelse(Over$ReadCode=="creatinine",paste(Over$stcreat), paste("NA")) 

Over$mdrd<- ifelse(Over$Units=="mLmin173m2"| Over$Units=="None",paste(Over$Value),paste(Over$value/1440)) 
Over$mdrd<- ifelse(Over$ReadCode=="eGFR",paste(Over$mdrd), paste("NA"))























#Drop all records entered after commencement of dialysis/transplant
Over$endpoint<-with(Over, ifelse(ReadCode=="dialysisorckd",paste(EntryDate), "NA"))
Over$endpoint<-with(Over, ifelse(ReadCode=="transplant",paste(EntryDate), paste(Over$endpoint)))

#APPLY ENDPOINT ACROSS ALL PATIENTS
Over$endpoint<-as.Date(Over$endpoint, format="%d/%m/%Y")
O<-Over[!is.na(Over$endpoint),c("PatID","endpoint")]
O2<-O%>%
group_by(PatID) %>%
slice(which.min(endpoint)) %>%
as.data.frame

Over<-Over[,c(1:19,21)] #remove original endpoint column
Over<-merge(Over,O2,all.x=TRUE) #merge on new variable
Over$EntryDate<-as.Date(as.character(Over$EntryDate), format="%d/%m/%Y")
Over$date_diff <- ifelse(!is.na(Over$endpoint),
difftime(strptime(Over$endpoint,format="%Y-%m-%d"),strptime(Over$EntryDate, format="%Y-%m-%d"),units="days"), paste("NA"))

Over<-Over[is.na(Over$date_diff)|Over$date_diff>=0, ]
#date_diff is never more than 0 in this dataset

#This gives you a subset of records for patients before CKD, transplant or dialysis


#Check for and delete delayed duplicates
class(EntryDate)
Over$EntryDate<-as.Date(Over$EntryDate, format="%d/%m/%Y")
MONTH<- format(Over$EntryDate, "%m")
YEAR<- format(Over$EntryDate, "%Y")
Over$EntryPeriod<-paste(MONTH,YEAR)

library(lubridate)
d<-Over[!(duplicated(Over$Value)&duplicated(Over$PatID)&duplicated(Over$EntryPeriod)),]
d2<-subset(d,d$ReadCode=="creatinine",)

#Write an input file for STATA with headings complementary to Aberdeen algorithm 
SIRinput<-file(paste("SIR_Rinput.csv"), open="w")
cat("studyid","dos","stcreat","mdrd","location_code","age","sex","\n", sep=",",file="SIR_Rinput.csv",append=TRUE)
for (n in 1:205667){ #Change loop number to number of records in dataset
cat((paste(d2$PatID[n])),(paste(d2$EntryDate[n])), (paste(d2$stcreat[n])),(paste(d2$mdrd[n])), (paste(d2$Source[n])),(paste(d2$Age[n])), (paste(d2$Sex[n])), "\n", file="SIR_Rinput.csv", sep=",", fill=FALSE, labels=NULL, append=TRUE)}
