Prior preprocesing: In excel, removed # symbols, removed start tabs from indented rows and edited rows with value in units column in order to load into R.
library(lubridate)
library(plyr)
library(dplyr)

#Join tables previously split for formatting
Patients<-read.table("Patients.csv",header=TRUE, sep=",")
testsA<-read.table("1tests.csv",header=TRUE,sep= ",")
testsB<-read.table("2tests.csv",header=TRUE,sep= ",",quote="")
testsC<-read.table("3tests.csv",header=TRUE,sep= ",") 
testsD<-read.table("4tests.csv",header=TRUE,sep= ",")
testsE<-read.table("5tests.csv",header=TRUE,sep= ",")
testsF<-read.table("6tests.csv",header=TRUE,sep= ",")
testsG<-read.table("7tests.csv",header=TRUE,sep= ",")
testsH<-read.table("8tests.csv",header=TRUE,sep= ",")
tests<- rbind(testsA,testsB,testsC,testsD,testsE,testsF,testsG,testsH)
write.csv(tests,file="tests.csv")
#In our analysis it was only possible to load data in multiple files:
#Only need to do this once: rbind, save a copy for future analysis
#################################################################################################

Patients<-read.table("Patients.csv",header=TRUE, sep=",")
tests<-read.table("tests.csv",header=TRUE,sep= ",")
SIR<- merge(Patients,tests,all=TRUE, by='PatID')
SIR<-SIR[!SIR$ReadCode %in% levels(SIR$ReadCode)[c(2:23)],] #Remove CKD codes originally used for the extraction but not needed here
levels(as.factor(SIR$PatID))
#78630

#create new vectors for age, hospital/GP (Full dob not provided)
SIR$Age<-(as.numeric(year(strptime(SIR$EntryDate, format="%d/%m/%Y"))))-SIR$Year_Of_Birth
attach(SIR)

#select data from individuals aged 15 and over
Over<-subset(SIR,SIR$Age>15 & as.numeric(year(strptime(SIR$EntryDate, format="%d/%m/%Y")))>=2009,)
Over$location<- ifelse(Over$Source=="salfordt", c("Hospital"),("GP"))
attach(Over)

#Group related read codes
levels(Over$ReadCode)
levels(Over$ReadCode)[c(2:23)] <- "drop"
levels(Over$ReadCode)[c(1,25:38,41)] <- "dialysis"
levels(Over$ReadCode)[c(3:11)] <- "creatinine"
levels(Over$ReadCode)[4:7] <- "eGFR"
levels(Over$ReadCode)[5:15] <- "transplant"

table(Over$ReadCode)
#Check these manually every time you re-extract/resubset as they will change
attach(Over)

#Assign more options
options(expressions=20000)
Over$EntryDate<-as.Date(as.character(Over$EntryDate), format="%d/%m/%Y")
quant<-Over[Over$ReadCode=="creatinine" &as.numeric(Over$Value)>0 & as.numeric(year(strptime(Over$EntryDate, format="%Y-%m-%d")))==2012,]
table(quant$ReadCode)
#Gives the number of creatinine values for the index year prior to data cleansing (284309)

#Check which units have been used to measure Creatinine and convert #from mg/dL to umol/L if needed
levels(Over$Units)
levels(Over$Units)[c(1,10,13,14,16:31,37:41)]<- "mLmin173m2"
levels(Over$Units)[c(11,13:15,20:23)]<-"umol/L"
table(Over$Units,Over$ReadCode)

Over$Value<-as.numeric(Over$Value)
Over$stcreat<- ifelse(Over$Units=="umol/L"| Over$Units=="None",Over$Value,(Over$Value/1000)) 
Over$stcreat<- ifelse(Over$Units=="pmoloL", as.numeric(Over$Value)/1000000, paste(Over$stcreat)) 
Over$stcreat<- ifelse(Over$ReadCode=="creatinine",paste(Over$stcreat), paste("NA")) 
Over$stcreat<-as.numeric(Over$stcreat)

Over$mdrd<- ifelse(Over$Units=="mLo24ho1.73m*2",paste(as.numeric(Over$Value)/1440),paste("NA"))
Over$mdrd<- ifelse(Over$Units=="mLmin173m2",paste(Over$Value),paste(Over$mdrd)) 
Over$mdrd<- ifelse(Over$ReadCode=="eGFR",paste(Over$mdrd), paste("NA"))
Over$mdrd<-as.numeric(Over$mdrd)

#Simplify ethnicity for eGFR calculation (B being black ethnicities, A being other ethnicities)
levels(Over$Ethnicity)[97:142]<-"A"
levels(Over$Ethnicity)[3:10]<-"A"
levels(Over$Ethnicity)[22:27]<-"A"
levels(Over$Ethnicity)[24:67]<-"A"
levels(Over$Ethnicity)[26:36]<-"A"
levels(Over$Ethnicity)[1:2]<-"B"
levels(Over$Ethnicity)[3:27]<-"B"
table(Over$Ethnicity)

MONTH<- format(Over$EntryDate, "%m")
YEAR<- format(Over$EntryDate, "%Y")
Over$EntryPeriod<-paste(MONTH,YEAR)
gsub(" ", "", Over$EntryPeriod, fixed = TRUE)
Over$EntryPeriod<-as.numeric(as.factor(Over$EntryPeriod))

#Generate vector for whether test after commencement of dialysis/transplant
Over$endpoint<-with(Over, ifelse(Over$ReadCode=="dialysis",paste(Over$EntryDate), "NA")) 
Over$endpoint<-with(Over, ifelse(Over$ReadCode=="transplant",paste(EntryDate), paste(Over$endpoint)) )
levels(as.factor(Over$endpoint))
Over$EntryDate<-as.Date(Over$EntryDate, format="%d/%m/%Y")
Over$endpoint<-as.Date(Over$endpoint, format="%Y-%m-%d")

#Set up a small table which is just a list of RRT patients and their start RRT dates
smalltab<-Over[!is.na(Over$endpoint),]
smalltab<-smalltab[order(smalltab$endpoint),]
smalltab<-smalltab[,c(“PatID”,”endpoint”)]
smalltab$PatID
#Subset of 266 renal Patients
#Order by first rrt/transplant record

each <- unique(smalltab$PatID)
a<-length(each)
first <- c()
for (i in 1:a) {  temp<-subset(smalltab, PatID==each[i])
if (dim(temp)[1] < 1) {
earliest<-temp[dim(temp)[1],]}
else {earliest<-temp}
first<-rbind(first, earliest)}
head(first)
#first lists earliest instance of dialysis/transplant by PatID

#Create a table of unique PatIDs not related to RRT
xtab<-Over[is.na(Over$endpoint),c(“PatID”,”endpoint”)]
dupna<-duplicated(xtab[,c(1)])
xbtab<-xtab[!dupna,]

#Join to give 1 list of all PatIDs and end dates if relevant
P<-rbind(first,xbtab)
length(levels(as.factor(P$PatID))) #77537, 77381
length(levels(as.factor(first$PatID))) #132
length(levels(as.factor(xbtab$PatID))) #77536, 77380
dupnp<-duplicated(P[,c(1)])
P<-P[!dupnp,]

#Merge P onto original table
Over2<- merge(Over,P,by='PatID')
levels(as.factor(Over2$PatID))
#77537
#endpoint is now added to all records of RRT patients
which(!is.na(Over2$endpoint.y))
Over2$rrt<- as.numeric((Over2$EntryDate)-(Over2$endpoint.y))

length(Over2$PatID)
Over2<-Over2[Over2$rrt>0|is.na(Over2$rrt),]
length(levels(as.factor(Over2$PatID)))
#75530 patients

#Remove all dialysis/transplant records after start of dialysis
table(Over2$ReadCode)
Over2<-Over2[Over2$ReadCode=="creatinine"|Over2$ReadCode=="eGFR",]
table(Over2$ReadCode)
indexnorrt<-subset(Over2,as.numeric(year(strptime(Over2$EntryDate, format="%Y-%m-%d")))==2012,)
indexd<-indexnorrt[indexnorrt$ReadCode=="creatinine",]
length(indexd$PatID)

quant2<-Over2[Over2$ReadCode=="creatinine" &Over2$Value>0 & as.numeric(year(strptime(Over2$EntryDate, format="%Y-%m-%d")))==2012,]
table(quant2$ReadCode)
#Gives the number of creatinine values for the index year
#after renal patient test removal

#REMOVE DUPLICATES WITHIN THE SAME CALENDAR MONTH
#Delete all duplicates within the same calendar month
Over2$stcreat<-as.numeric(Over2$stcreat)
Over2$PatID<-as.numeric(Over2$PatID)
Over2<-Over2[order(Over2$PatID,rev(Over2$EntryDate)),]
d<-duplicated(Over2[,c("PatID","EntryPeriod","stcreat")])
Over2<-Over2[!d,]
Over2<-Over2[,c("PatID","Sex","Ethnicity","Source","EntryDate","Age","stcreat","mdrd")]

#Reshape table so mdrd and stcreat are on the same line to avoid STATA issues
Overb<-aggregate(x=Over2[c("stcreat","mdrd")], by=list(PatID=Over2$PatID,EntryDate=Over2$EntryDate,Age=Over2$Age,Sex=Over2$Sex,Ethnicity=Over2$Ethnicity,Source=Over2$Source), min, na.rm = TRUE)
head(Overb)

#How many patients had creatinine tests in the index year 
#following data cleansing
index<-subset(Overb,as.numeric(year(strptime(Overb$EntryDate, format="%Y-%m-%d")))==2012,)
length(levels(as.factor(index$PatID)))
length(index$stcreat)
#How many females have a creatinine result for the index year
indexf<-subset(index,index$Sex=="F")
length(levels(as.factor(indexf$PatID)))
#How many creatinine test records for the index year by age
index70<-subset(index,index$Age>=70)
length(levels(as.factor(index70$PatID)))
index39<-subset(index,index$Age<=39)
length(levels(as.factor(index39$PatID)))

#Cut the table down to patients with a creatinine test in the index year
Over4<-Overb[Overb$PatID %in% index$PatID,]
length(Over4$stcreat)
length(index$stcreat)
#There should always be more records in Over4 than in index

#Assign associated eGFR if missing (using MDRD formula)
Over4$stcreat<-as.numeric(Over4$stcreat)
Over4$mdrd<-ifelse(Over4$mdrd=="0"|Over4$mdrd=="Inf",paste("NA"),paste(Over4$mdrd))
Over4$mdrd<-ifelse(Over4$mdrd=="NA"&Over4$Sex=="M"&Over4$Ethnicity=="B",175*((Over4$stcreat/88.4)^-1.154)*((Over4$Age)^-0.203)*1.212,paste(Over4$mdrd))
Over4$mdrd<-ifelse(Over4$mdrd=="NA"&Over4$Sex=="F"&Over4$Ethnicity=="A",(175*((Over4$stcreat/88.4)^-1.154)*((Over4$Age)^-0.203)*0.742),paste(Over4$mdrd))
Over4$mdrd<-ifelse(Over4$mdrd=="NA"&Over4$Sex=="F"&Over4$Ethnicity=="B",(175*((Over4$stcreat/88.4)^-1.154)*((Over4$Age)^-0.203)*0.742*1.212),paste(Over4$mdrd))
Over4$mdrd<-ifelse(Over4$mdrd=="NA",(175*(Over4$stcreat/88.4)^-1.154)*((Over4$Age)^-0.203),paste(Over4$mdrd))

#Drop eGFR values over 250 uml/L
Over4<-Over4[Over4$mdrd<=250,]
length(Over4$PatID)
# Over4 is a subset from patients before transplant or dialysis
#for patients over 15 
#with records within the index year, records from 01/01/2009 to 07/12/2014 #excluding null creatinine values 
#excluding mdrd>250.

#Write an input file for STATA with headings needed for Aberdeen algorithm
attach(Over4)

SIRinput_conf<-file(paste("SIR_Rinput_conf.csv"), open="w")
cat("studyid","dos","stcreat","mdrd","location_code","age","sex","\n", sep=",",file="SIR_Rinput_conf.csv",append=TRUE)

for (n in 1:length(Over4$PatID)){ #Change loop number to number of records in dataset
cat((paste(Over4$PatID[n])),(paste(Over4$EntryDate[n])), (paste(Over4$stcreat[n])),(paste(Over4$mdrd[n])), (paste(Over4$Source[n])),(paste(Over4$Age[n])),(paste(Over4$Sex[n])), "\n", file="SIR_Rinput_conf.csv", sep=",", fill=FALSE, labels=NULL, append=TRUE)}


